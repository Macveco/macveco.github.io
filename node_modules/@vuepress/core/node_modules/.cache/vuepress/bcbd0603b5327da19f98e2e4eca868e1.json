{"remainingRequest":"/home/mvco/workspace/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mvco/workspace/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/mvco/workspace/blog/node_modules/vue-loader/lib/index.js??ref--1-1!/home/mvco/workspace/blog/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/mvco/workspace/blog/docs/articles/trpl/ch14-03-cargo-workspaces.md?vue&type=template&id=2dc1dab0&","dependencies":[{"path":"/home/mvco/workspace/blog/docs/articles/trpl/ch14-03-cargo-workspaces.md","mtime":1605854354000},{"path":"/home/mvco/workspace/blog/node_modules/cache-loader/dist/cjs.js","mtime":1606019031847},{"path":"/home/mvco/workspace/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606019032510},{"path":"/home/mvco/workspace/blog/node_modules/cache-loader/dist/cjs.js","mtime":1606019031847},{"path":"/home/mvco/workspace/blog/node_modules/vue-loader/lib/index.js","mtime":1606019032510},{"path":"/home/mvco/workspace/blog/node_modules/@vuepress/markdown-loader/index.js","mtime":1606019031543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}